// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  firstName     String
  secondName    String
  color         String
  email         String          @unique
  emailVerified DateTime?
  authorized    Boolean         @default(false)
  image         String?
  password      String?
  accounts      Account[]
  quiz          Quiz?           @relation
  tags          Tag[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  
  type               String
  provider           String
  providerAccountId  String  
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quiz {
  id        String   @id @default(cuid())
  name      String
  userId    String   @unique
  questions Question[]
  results   Result[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
}

model Result {
  id        String   @id @default(cuid())
  name      String
  quizId    String
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Question {
  id        String   @id @default(cuid())
  text      String
  quizId    String
  answers   Answer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Answer {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean  @default(false)
  questionId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}